// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Combination Sum
// https://leetcode.com/problems/combination-sum/
// 

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        if (candidates == null || candidates.length == 0) {
            return results;
        }
        Arrays.sort(candidates);
        helper(candidates, 0, target, new ArrayList<Integer>(), results);
        return results;
    }
    private void helper(int[] nums,
                        int startIndex,
                        int remain,
                        ArrayList<Integer> combination,
                        List<List<Integer>> results) {
        if (remain == 0) {
            results.add(new ArrayList<Integer>(combination));
            return;
        }
        for (int i = startIndex; i < nums.length; i++) {
            if (remain - nums[i] >= 0) { //没加判断
                combination.add(nums[i]);
                helper(nums, i, remain - nums[i], combination, results);
                combination.remove(combination.size() - 1);
            }
        }
    }
}

