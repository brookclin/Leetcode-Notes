// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Smallest Rectangle Enclosing Black Pixels
// https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/
// 

class Solution {
    public int minArea(char[][] image, int x, int y) {
        if (image == null || image.length == 0 || image[0].length == 0) {
            return 0;
        }
        int n = image.length;
        int m = image[0].length;
        
        int left = firstLeft(image, 0, y);
        int right = firstRight(image, y, m - 1);
        int up = firstUp(image, 0, x);
        int down = firstDown(image, x, n - 1);
        
        return (right - left + 1) * (down - up + 1);
        
    }
    private int firstLeft(char[][] image, int start, int end) {
        int mid;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (!isEmptyColumn(image, mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (!isEmptyColumn(image, start)) {
            return start;
        }
        return end;
    }
    private int firstRight(char[][] image, int start, int end) {
        int mid;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (!isEmptyColumn(image, mid)) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (!isEmptyColumn(image, end)) {
            return end;
        }
        return start;
    }
    private int firstUp(char[][] image, int start, int end) {
        int mid;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (!isEmptyRow(image, mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (!isEmptyRow(image, start)) {
            return start;
        }
        return end;
    }
    private int firstDown(char[][] image, int start, int end) {
        int mid;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (!isEmptyRow(image, mid)) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (!isEmptyRow(image, end)) {
            return end;
        }
        return start;
    }
    
    private boolean isEmptyColumn(char[][] image, int col) {
        for (int i = 0; i < image.length; i++)  {
            if (image[i][col] == '1') {
                return false;
            }
        }
        return true;
    }
    private boolean isEmptyRow(char[][] image, int row) {
        for (int i = 0; i < image[0].length; i++) {
            if (image[row][i] == '1') {
                return false;
            }
        }
        return true;
    }
}

