// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Palindrome Partitioning
// https://leetcode.com/problems/palindrome-partitioning/
// 

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> results = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return results;
        }
        helper(s, 0, new ArrayList<String>(), results);
        return results;
    }
    private void helper(String s,
                        int startIndex,
                        ArrayList<String> partition,
                        List<List<String>> results) {
        if (startIndex == s.length()) { // 递归终止条件
            results.add(new ArrayList<String>(partition)); 
        }
        for (int i = startIndex; i < s.length(); i++) { // 不是 s.length() - 1
            String sub = s.substring(startIndex, i + 1); // 不是 i
            if (isPalindrome(sub)) {
                partition.add(sub);
                helper(s, i + 1, partition, results);
                partition.remove(partition.size() - 1);
            }
        }
    }
    private boolean isPalindrome(String s) {
        int j = s.length() - 1;
        int i = 0;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}

