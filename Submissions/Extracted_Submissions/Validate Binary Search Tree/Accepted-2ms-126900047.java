// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Validate Binary Search Tree
// https://leetcode.com/problems/validate-binary-search-tree/
// 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        ResultType result = helper(root);
        return result.isBST;
    }
    
    private ResultType helper(TreeNode root) {
        if (root == null) {
            return new ResultType(Integer.MAX_VALUE, Integer.MIN_VALUE, true);
        }
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        if (!left.isBST || !right.isBST) { // 左右不是直接退
            return new ResultType(0, 0, false);
        }
        if ((root.left != null && root.val <= left.max) || (root.right != null && root.val >= right.min)) {
            return new ResultType(0, 0, false); //
        }
        return new ResultType(Math.min(left.min, root.val), Math.max(right.max, root.val), true);
    }
}
class ResultType {
    public int min;
    public int max;
    public boolean isBST;
    public ResultType(int min, int max, boolean isBST) {
        this.min = min;
        this.max = max;
        this.isBST = isBST;
    }
}

