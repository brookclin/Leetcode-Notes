// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Word Search II
// https://leetcode.com/problems/word-search-ii/
// 

class Solution {
    public int[] toX = {0, 0, -1, 1};
    public int[] toY = {-1, 1, 0, 0};
    public int m;
    public int n;
    public List<String> findWords(char[][] board, String[] words) {
        Trie trie = new Trie(new TrieNode());
        for (String word : words) {
            trie.insert(word);
        }
        m = board.length;
        n = board[0].length;
        List<String> results = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                char c = board[i][j];
                if (trie.root.map.containsKey(c)) { // root.map
                    search(board, i, j, trie.root, results);
                }
            }
        }
        return results;
    }
    public void search(char[][] board, int x, int y, TrieNode node, List<String> ans) {
        if (node.isEnd && !ans.contains(node.s)) { // 后半句没写
            ans.add(node.s);
            // return;
        }
        if (x < 0 || x >= m || y < 0 || y >= n || node == null || board[x][y] == '0') { // WA：这个在前面 棋盘只有一个字的时候就会错
            return;
        }
        if (!node.map.containsKey(board[x][y])) { // contains
            return;
        }
        char now = board[x][y];
        for (int k = 0; k < 4; k++) {
            board[x][y] = '0';
            search(board, x + toX[k], y + toY[k], node.map.get(now), ans);
            board[x][y] = now; // hash
        }
    }
}
class TrieNode {
    // 还要存一个string 如果这个是字典里的单词的话
    public String s;
    public boolean isEnd;
    public char c;
    public HashMap<Character, TrieNode> map = new HashMap<>();
    public TrieNode() {
        s = "";
    }
    public TrieNode(char c) {
        this.c = c;
        s = "";
    }
}
class Trie {
    public TrieNode root;
    public Trie(TrieNode node) {
        root = node;
    } 
    public void insert(String s) {
        TrieNode now = root;
        char[] charArray = s.toCharArray();
        int i = 0;
        for (i = 0; i < charArray.length; i++) {
            char c = charArray[i];
            if (!now.map.containsKey(c)) {
                now.map.put(c, new TrieNode(c));
            }
            now = now.map.get(c);
        }
        if (i == charArray.length) { // length()
            now.isEnd = true;
            now.s = s;
        }
    }
    public boolean search(String s) {
        TrieNode result = find(s);
        if (result == null || result.isEnd == false) {
            return false;
        }
        return true;
        // node.isEnd == true?
    }
    public boolean startWith(String s) {
        TrieNode result = find(s);
        if (result == null) {
            return false;
        }
        return true;
    }
    public TrieNode find(String s) {
        // recursive
        
        // if (index == s.length()) {
        //     return now;
        // }
        // char c = s.charAt(index);
        // if (now.containsKey(c)) {
        //     find(s, index + 1, now.get(c));
        // } else {
        //     return null;
        // }
        
        TrieNode now = root;
        char[] charArray = s.toCharArray();
        for (int i = 0; i < charArray.length; i++) {
            char c = charArray[i];
            if (now.map.containsKey(c)) { // now.containsKey
                now = now.map.get(c);
            } else {
                return null;
            }
        }
        return now;
    }
}

