// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Combination Sum III
// https://leetcode.com/problems/combination-sum-iii/
// 

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> results = new ArrayList<>();
        if (k == 0) {
            return results;
        }
        helper(1, k, n, new ArrayList<Integer>(), results);
        return results;
    }
    private void helper(int startIndex,
                        int remainNums,
                        int remainTarget,
                        ArrayList<Integer> combination,
                        List<List<Integer>> results) {
        if (remainNums == 0 && remainTarget == 0) {
            results.add(new ArrayList<Integer>(combination));
        }
        for (int i = startIndex; i < 10; i++) {
            if (remainTarget - i >= 0) {
                combination.add(i);
                helper(i + 1, remainNums - 1, remainTarget - i, combination, results);
                combination.remove(combination.size() - 1);
            }
        }
    }
}

