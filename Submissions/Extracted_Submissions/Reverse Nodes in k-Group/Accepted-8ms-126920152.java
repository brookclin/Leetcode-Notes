// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Reverse Nodes in k-Group
// https://leetcode.com/problems/reverse-nodes-in-k-group/
// 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        while (prev != null) {
            prev = helper(prev, k);
        }
        return dummy.next;
    }
    private ListNode helper(ListNode prev, int k) {
        if (k <= 1) { // no need to reverse
            return null;
        }
        ListNode node1 = prev.next;
        ListNode nk = prev;
        for (int i = 0; i < k; i++) {
            if (nk == null) {
                return null;
            }
            nk = nk.next;
        }
        if (nk == null) {
            return null;
        }
        ListNode curt = node1;
        ListNode pre_curt = null;
        ListNode nkplus = nk.next;
        while (curt != nkplus) {
            ListNode temp = curt.next; // null pointer
            curt.next = pre_curt;
            pre_curt = curt;
            curt = temp;
        }
        node1.next = nkplus;
        prev.next = nk;
        return node1; // 不是nk
    }
}

