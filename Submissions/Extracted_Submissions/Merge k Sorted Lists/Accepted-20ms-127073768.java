// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Merge k Sorted Lists
// https://leetcode.com/problems/merge-k-sorted-lists/
// 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        ListNode dummy = new ListNode(0);
        ListNode curt = dummy;
        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, new NodeComparator());
        for (ListNode node : lists) {
            // 没判断空
            if (node != null) {
                pq.add(node);
            }   
        }
        while (!pq.isEmpty()) {
            ListNode now = pq.poll();
            if (now.next != null) {
                pq.add(now.next);
            }
            curt.next = now;
            curt = curt.next;
        }
        return dummy.next;
    }
}
class NodeComparator implements Comparator<ListNode> {
    public int compare(ListNode a, ListNode b) {
        return a.val - b.val;
    }
}

