// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Binary Tree Longest Consecutive Sequence II
// https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/
// 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int max = 0; //
    public int longestConsecutive(TreeNode root) {
        helper(root);
        return max;
    }
    private int[] helper(TreeNode root) { // return {inc, dec}
        if (root == null) {
            return new int[] {0, 0};
        }
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        
        if (root.left != null && root.left.val != root.val + 1) { // increase
            left[0] = 0;
        }
        if (root.left != null && root.left.val != root.val - 1) { // decrease
            left[1] = 0;
        }
        if (root.right != null && root.right.val != root.val + 1) {
            right[0] = 0;
        }
        if (root.right != null && root.right.val != root.val - 1) {
            right[1] = 0;
        }
        max = Math.max(left[0] + right[1] + 1, max);
        max = Math.max(left[1] + right[0] + 1, max);
        int inc = Math.max(left[0] + 1, right[0] + 1);
        int dec = Math.max(left[1] + 1, right[1] + 1);
        return new int[] {inc, dec};
    }
}

