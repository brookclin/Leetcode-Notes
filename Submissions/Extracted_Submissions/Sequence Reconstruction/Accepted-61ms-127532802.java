// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Sequence Reconstruction
// https://leetcode.com/problems/sequence-reconstruction/
// 

class Solution {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        if (org == null || org.length == 0 || seqs == null || seqs.size() == 0) {
            return false;
        }
        int n = org.length;
        List<Integer>[] neighbors = new List[n + 1]; // List[] neighbors = new List[n+1]
        int[] indegrees = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            neighbors[i] = new ArrayList<Integer>();
            indegrees[i] = -1;                       // 不在seq里的元素 不能算indegree
        }
        for (List<Integer> seq : seqs) {
            //for (int i = 0; i < seq.size() - 1; i++) { // seq.length x-> arraylist
            for (int i = 0; i < seq.size(); i++) {
                int u = seq.get(i);
                int v = 0;
                if (i + 1 < seq.size()) {
                    v = seq.get(i+1);
                }
                if (u > n || u < 1) {  // u >= n || v >= n
                    return false;               // [1,1000000000] 直接跳 错在这里
                }
                if (indegrees[u] == -1) {
                    indegrees[u] = 0;
                }
                if (v != 0) {
                    if (v > n || v < 1) {
                        return false;
                    }
                    if (indegrees[v] == -1) {
                        indegrees[v] = 0;
                    }
                    neighbors[u].add(v);
                    indegrees[v]++;
                }
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 1; i <= n; i++) {
            if (indegrees[i] == 0) {
                queue.offer(i);
            }
        }
        if (queue.size() > 1) {
            return false;
        }
        int count = 0;
        while (!queue.isEmpty()) {
            int cur = (int) queue.poll();
            count++;
            for (Integer neighbor : neighbors[cur]) {
                indegrees[neighbor]--;
                if (indegrees[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
            if (queue.size() > 1) {
                return false;
            }
        }
        if (count == n) {               // [1][]  [1][[],[]]
            return true;
        }
        return false;
    }
}

