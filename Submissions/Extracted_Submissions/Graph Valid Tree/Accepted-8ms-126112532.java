// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Graph Valid Tree
// https://leetcode.com/problems/graph-valid-tree/
// 

class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (edges == null || n - 1 != edges.length) {
            return false;
        }
        HashMap<Integer, Set<Integer>> graph = initGraph(n, edges);
        HashSet<Integer> hash = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        hash.add(0);
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (Integer neighbor : graph.get(cur)) {
                if (!hash.contains(neighbor)) {
                    queue.offer(neighbor);
                    hash.add(neighbor);
                }
            }
        }
        return hash.size() == n;
        
    }
    private HashMap<Integer, Set<Integer>> initGraph(int n, int[][] edges) {
        HashMap<Integer, Set<Integer>> results = new HashMap<>();
        for (int i = 0; i < n; i++) {
            results.put(i, new HashSet<Integer>());
        }
        for (int i = 0; i < edges.length; i++) {
            int k = edges[i][0];
            int v = edges[i][1];
            results.get(k).add(v);
            results.get(v).add(k);
        }
        return results;
    }
}

