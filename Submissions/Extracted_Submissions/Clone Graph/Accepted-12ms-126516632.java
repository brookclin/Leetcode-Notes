// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Clone Graph
// https://leetcode.com/problems/clone-graph/
// 

/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node == null) {
            return null;
        }
        Set<UndirectedGraphNode> nodeSet = getNodeSet(node);
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>(); // map 是用来存新旧node的 <旧，新>
        // copy nodes
        for (UndirectedGraphNode cur : nodeSet) {
            map.put(cur, new UndirectedGraphNode(cur.label));
        }
        // copy edges/neighbors
        for (UndirectedGraphNode cur : map.keySet()) {
            for (UndirectedGraphNode neighbor : cur.neighbors) {
                map.get(cur).neighbors.add(map.get(neighbor)); // 不能直接add neighbor 要add copied neighbor
            }
        }
        return map.get(node);
    }
    private Set<UndirectedGraphNode> getNodeSet(UndirectedGraphNode node) {
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        Set<UndirectedGraphNode> set = new HashSet<>();
        queue.offer(node);
        set.add(node);
        while (!queue.isEmpty()) {
            UndirectedGraphNode cur = queue.poll();
            for (UndirectedGraphNode neighbor : cur.neighbors) {
                if (!set.contains(neighbor)) {
                    queue.offer(neighbor);
                    set.add(neighbor);
                }
            }
        }
        return set;
    }
}


