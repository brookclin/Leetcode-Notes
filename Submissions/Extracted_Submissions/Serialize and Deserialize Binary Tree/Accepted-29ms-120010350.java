// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Serialize and Deserialize Binary Tree
// https://leetcode.com/problems/serialize-and-deserialize-binary-tree/
// 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        ArrayList<TreeNode> q = new ArrayList<>();
        q.add(root);
        for (int i = 0; i < q.size(); i++) {
            TreeNode cur = q.get(i);
            // 忘了判断cur是否空 .left .right会报错
            if (cur != null) {
                q.add(cur.left);
                q.add(cur.right);
            }
        }
        sb.append(q.get(0).val);
        for (int i = 1; i < q.size(); i++) {
            if (q.get(i) == null) {
                sb.append(",#");
            } else {
                sb.append(",");
                sb.append(q.get(i).val);
            }
        }
        sb.append("]");
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.equals("[]")) {
            return null;
        }
        String[] input = data.substring(1, data.length() - 1).split(",");
        TreeNode root = new TreeNode(Integer.parseInt(input[0]));
        int index = 0;
        boolean isRightChild = false;
        ArrayList<TreeNode> q = new ArrayList<>();
        q.add(root);
        for (int i = 1; i < input.length; i++) {
            if (!input[i].equals("#")) {
                TreeNode node = new TreeNode(Integer.parseInt(input[i]));
                if (!isRightChild) {
                    q.get(index).left = node;
                } else {
                    q.get(index).right = node;
                }
                // 错：忘了把当前node加进queue里了 用来排队做parent用
                // 导致index out of bound
                q.add(node);
            }
            isRightChild = !isRightChild;
            if (!isRightChild) {
                index++;
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

