// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Minimum Window Substring
// https://leetcode.com/problems/minimum-window-substring/
// 

class Solution {
    private void initTargetHash(String t, HashMap<Character, Integer> targetHash) {
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if (!targetHash.containsKey(c)) {
                targetHash.put(c, 0);
            }
            targetHash.put(c, targetHash.get(c) + 1);
        }
    }
    private boolean validate(HashMap<Character, Integer> source, 
                             HashMap<Character, Integer> target) {
        for (Character c : target.keySet()) {
            if (!source.containsKey(c)) {
                return false;
            }
            if (source.get(c) < target.get(c)) {
                return false;
            }
        }
        return true;
    }
    public String minWindow(String s, String t) {
        int minLen = Integer.MAX_VALUE; // 不是0
        String minStr = "";
        HashMap<Character, Integer> sourceHash = new HashMap<>();
        HashMap<Character, Integer> targetHash = new HashMap<>();
        initTargetHash(t, targetHash);
        int j = 0;
        for (int i = 0; i < s.length(); i++) {
            while (!validate(sourceHash, targetHash) && j < s.length()) {
                char c = s.charAt(j); // 不是加t的char
                if (!sourceHash.containsKey(c)) {
                    sourceHash.put(c, 0);
                }
                sourceHash.put(c, sourceHash.get(c) + 1);
                j++;
            }
            // 没写validate 果然错在这里 只返回了一个C
            if (validate(sourceHash, targetHash)) {
                if (j - i < minLen) { 
                    minLen = j - i;
                    minStr = s.substring(i, j);
                }
            }
            char d = s.charAt(i);
            sourceHash.put(d, sourceHash.get(d) - 1);
            if (sourceHash.get(d) == 0) {
                sourceHash.remove(d);
            }
        }
        return minStr;
    }
}

